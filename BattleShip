from random import randint

class BoardException(Exception):
    pass

class BoardOutException(BoardException):
    def __str__(self):
        return "Вы не может походить за пределами игрового поля!"

class BoardFilledException(BoardException):
    def __str__(self):
        return "Вы уже стреляли в эту клетку!"

class BoardWrongShipException(BoardException):
    pass

#класс точки координат
class Dot:
    def __init__(self,x,y):
        self.x = x
        self.y = y
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __str__(self):
        return f"Dot({self.x}, {self.y})"

#класс корабля: l - длина, bow - координаты носа корабля, dir - направление(0 - вниз, 1 - вправо)
class Ship:
    def __init__(self, bow, l, dir):
        self.bow = bow
        self.l = l
        self.dir = dir
        self.hp = l    #здоровье корабля

    @property
    def dots(self):
        ship_dots = []                                    #список координат всех ячеек корабля
        for i in range(self.l):
            dot_x = self.bow.x
            dot_y = self.bow.y

            if self.dir == 0:
                dot_x += i

            elif self.dir == 1:
                dot_y += i
            ship_dots.append(Dot(dot_x,dot_y))
        return ship_dots

    #выстрел по ячейке корабля
    def shooten(self, shot):
        return shot in self.dots

#класс игрового поля
class Board:
    def __init__(self, hid = False, size = 6):
        self.size = size
        self.hid = hid
        self.count = 0
        self.field = [['0']*size for _ in range(size)]
        self.busy = []
        self.ships = []
    #прорисовка игровой доски
    def __str__(self):
        board = ""
        board += "   | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i,j in enumerate(self.field):
            board += f"\n {i+1} | " + " | ".join(j) + " |"
        #блюр игрового поля при необходимости
        if self.hid:
            board = board.replace("■", "0")
        return board
    #проверка нахождения точки за пределами игрового поля
    def out(self, d):
        return not((0 <= d.x < self.size) and (0 <= d.y < self.size))

    #контур вокруг уничтоженного корабля
    def contour(self, ship, verb = False):
        near = [(-1, -1), (-1, 0), (-1, 1),
                (0, -1), (0, 0), (0, 1),
                (1, -1), (1, 0), (1, 1)]

        for d in ship.dots:
            for di, dj in near:
                dot = Dot(d.x + di, d.y + dj)
                if not (self.out(dot)) and dot not in self.busy:
                    if verb:
                        self.field[dot.x][dot.y] = "."
                    self.busy.append(dot)

   #добавление корабля на доску
    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.dots:
            self.field[d.x][d.y] = "■"
            self.busy.append(d)
        self.ships.append(ship)
        self.contour(ship)

    #выстрел по кораблям соперника
    def shot(self, d):
        if self.out(d):
            raise BoardOutException()
        if d in self.busy:
            raise BoardFilledException()
        self.busy.append(d)

        for ship in self.ships:
            if d in ship.dots:
                ship.hp -= 1
                self.field[d.x][d.y] = "X"
                if ship.hp == 0:
                    self.count += 1
                    self.contour(ship, verb = True)
                    print("Корабль уничтожен!")
                    return True    #если корбаль убит, ход продолжается
                else:
                    print("Корабль ранен!")
                    return True    #если корабль ранен, ход продолжается
        self.field[d.x][d.y] = "."
        print("Мимо!")
        return False    #если игрок промазал, ход переходит к сопернику

    #обнуление списка занятых ячеек
    def begin(self):
        self.busy = []

    #
    def defeat(self):
        return self.count == len(self.ships)

#класс игрока
class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    #ход игрока
    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)

#класс компьютера (делает рандомные ходы)
class AI(Player):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f"Ход компьютера: {d.x+1} {d.y+1}")
        return d

#класс игрока
class User(Player):
    def ask(self):
        while True:
            cords = input('Ваш ход: '). split()
            if len(cords) != 2:
                print("Введите 2 координаты!")
                continue
            x, y = cords
            if not (x.isdigit()) or not (y.isdigit()):
                print("Введите числа!")
                continue
            x, y = int(x), int(y)
            return Dot(x-1, y-1)

#класс игры
class Game:
    def __init__(self, size = 6):
        self.size = size
        us = self.random_board()
        ai = self.random_board()
        ai.hid = True

        self.ai = AI(ai, us)
        self.us = User(us, ai)

    #генерация доски
    def try_board(self):
        ships = [3, 2, 2, 1, 1, 1, 1]
        board = Board()
        attempts = 0
        for s in ships:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0,self.size)), s, randint(0,1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board
    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board

    #вывод приветствия
    def greeting(self):
        print("-------------------")
        print("  Приветсвуем вас  ")
        print("      в игре       ")
        print("    морской бой    ")
        print("-------------------")
        print(" формат ввода: x y ")
        print(" x - номер строки  ")
        print(" y - номер столбца ")


    def loop(self):
        num = 0
        while True:
            print("-"*28)
            print("Доска пользователя:")
            print(self.us.board)
            print("-"*28)
            print("Доска компьютера:")
            print(self.ai.board)
            print("-"*28)
            if num % 2 == 0:
                print("Ходит пользователь!")
                repeat = self.us.move()
            else:
                print("Ходит компьютер!")
                repeat = self.ai.move()
            if repeat:
                num -= 1
            if self.ai.board.defeat():
                print("-"*20)
                print("Пользователь выиграл!")
                break
            if self.us.board.defeat():
                print("-"*20)
                print("Компьютер выиграл!")
                break
            num += 1

    #запуск игры
    def start(self):
        self.greeting()
        self.loop()

g = Game()
g.start()
